/*С помощью односвязного списка напишите реализацию LinkedList.
                У пользователя должны быть доступны методы добавления элемента, получения элемента и удаления элемента из списк.
        Условия:
        - Нельзя использовать шаблоны(готовый LinkedList, методы для работы с ним)*/
class Node<T> {
    public T data;
    public Node<T> next;

    public Node(T data) {
        this.data = data;
    }
}

class LinkedList<T> {
    private Node<T> head;

    public LinkedList() {
        head = null;
    }

    public void addElement(T data) {
        Node<T> newNode = new Node<>(data);
        newNode.next = head;
        head = newNode;
    }

    public T getElement(int index) {
        Node<T> current = head;
        int count = 0;
        while (current != null) {
            if (count == index) {
                return current.data;
            }
            count++;
            current = current.next;
        }
        return null;
    }

    public void deleteElement(T data) {
        Node<T> current = head;
        Node<T> prev = null;

        while (current != null) {
            if (current.data.equals(data)) {
                if (prev == null) {
                    head = current.next;
                } else {
                    prev.next = current.next;
                }
                return;
            }
            prev = current;
            current = current.next;
        }
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList<Integer> linkedList = new LinkedList<>();
        linkedList.addElement(5);
        linkedList.addElement(9);
        linkedList.addElement(7);
        linkedList.addElement(1);
        int element = linkedList.getElement(2);
        System.out.println(element);
        linkedList.deleteElement(9);
        element = linkedList.getElement(2);
        System.out.println(element);
    }
}
